{{/*
Construct the fully qualified `image` from a list with 3 elements:
 - global Values scope object (`$`)
 - deployment object (`.Values.deployments.<deploymentKey>`)
 - image name (`string`)
*/}}
{{- define "ef-mobile-app.image" -}}
{{- $global := index . 0 -}}
{{- $deployment := index . 1 -}}
{{- $image := index . 2 -}}
image: {{ printf "%s/%s:%s" ( ( $deployment.image | default dict ).repository | default $global.Values.global.image.repository ) $image ( $deployment.version | default $global.Values.global.version ) | quote }}
{{- end -}}

{{/*
Generate `imagePullPolicy` based on a list with 2 elements:
 - global Values scope object (`$`)
 - deployment object (`.Values.deployments.<deploymentKey>`)
*/}}
{{- define "ef-mobile-app.imagePullPolicy" -}}
{{- $global := index . 0 -}}
{{- $deployment := index . 1 -}}
imagePullPolicy: {{ ($deployment.image | default dict).imagePullPolicy | default $global.Values.global.image.imagePullPolicy }}
{{- end -}}

{{/*
Generate deployment name for resource naming and labelling based on a list with 2 elements:
 - global Values scope object (`$`)
 - key of the deployment (`string`)
*/}}
{{- define "ef-mobile-app.deploymentName" -}}
{{- $global := index . 0 -}}
{{- $key := index . 1 -}}
{{ printf "%s-%s" $global.Release.Name $key }}
{{- end -}}
